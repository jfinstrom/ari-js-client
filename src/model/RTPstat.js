/**
 * Asterisk ARI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
* The RTPstat model module.
* @module model/RTPstat
* @version 6.0.0
*/
export default class RTPstat {
    /**
    * Constructs a new <code>RTPstat</code>.
    * A statistics of a RTP.
    * @alias module:model/RTPstat
    * @class
    * @param channelUniqueid {String} The Asterisk channel's unique ID that owns this instance.
    * @param localSsrc {Number} Our SSRC.
    * @param remoteSsrc {Number} Their SSRC.
    * @param rxcount {Number} Number of packets received.
    * @param rxoctetcount {Number} Number of octets received.
    * @param rxploss {Number} Number of received packets lost.
    * @param txcount {Number} Number of packets transmitted.
    * @param txoctetcount {Number} Number of octets transmitted.
    * @param txploss {Number} Number of transmitted packets lost.
    */

    constructor(channelUniqueid, localSsrc, remoteSsrc, rxcount, rxoctetcount, rxploss, txcount, txoctetcount, txploss) {
        
        
        this['channel_uniqueid'] = channelUniqueid;
        this['local_ssrc'] = localSsrc;
        this['remote_ssrc'] = remoteSsrc;
        this['rxcount'] = rxcount;
        this['rxoctetcount'] = rxoctetcount;
        this['rxploss'] = rxploss;
        this['txcount'] = txcount;
        this['txoctetcount'] = txoctetcount;
        this['txploss'] = txploss;
        
    }

    /**
    * Constructs a <code>RTPstat</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/RTPstat} obj Optional instance to populate.
    * @return {module:model/RTPstat} The populated <code>RTPstat</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RTPstat();
                        
            
            if (data.hasOwnProperty('channel_uniqueid')) {
                obj['channel_uniqueid'] = ApiClient.convertToType(data['channel_uniqueid'], 'String');
            }
            if (data.hasOwnProperty('local_maxjitter')) {
                obj['local_maxjitter'] = ApiClient.convertToType(data['local_maxjitter'], 'Number');
            }
            if (data.hasOwnProperty('local_maxrxploss')) {
                obj['local_maxrxploss'] = ApiClient.convertToType(data['local_maxrxploss'], 'Number');
            }
            if (data.hasOwnProperty('local_minjitter')) {
                obj['local_minjitter'] = ApiClient.convertToType(data['local_minjitter'], 'Number');
            }
            if (data.hasOwnProperty('local_minrxploss')) {
                obj['local_minrxploss'] = ApiClient.convertToType(data['local_minrxploss'], 'Number');
            }
            if (data.hasOwnProperty('local_normdevjitter')) {
                obj['local_normdevjitter'] = ApiClient.convertToType(data['local_normdevjitter'], 'Number');
            }
            if (data.hasOwnProperty('local_normdevrxploss')) {
                obj['local_normdevrxploss'] = ApiClient.convertToType(data['local_normdevrxploss'], 'Number');
            }
            if (data.hasOwnProperty('local_ssrc')) {
                obj['local_ssrc'] = ApiClient.convertToType(data['local_ssrc'], 'Number');
            }
            if (data.hasOwnProperty('local_stdevjitter')) {
                obj['local_stdevjitter'] = ApiClient.convertToType(data['local_stdevjitter'], 'Number');
            }
            if (data.hasOwnProperty('local_stdevrxploss')) {
                obj['local_stdevrxploss'] = ApiClient.convertToType(data['local_stdevrxploss'], 'Number');
            }
            if (data.hasOwnProperty('maxrtt')) {
                obj['maxrtt'] = ApiClient.convertToType(data['maxrtt'], 'Number');
            }
            if (data.hasOwnProperty('minrtt')) {
                obj['minrtt'] = ApiClient.convertToType(data['minrtt'], 'Number');
            }
            if (data.hasOwnProperty('normdevrtt')) {
                obj['normdevrtt'] = ApiClient.convertToType(data['normdevrtt'], 'Number');
            }
            if (data.hasOwnProperty('remote_maxjitter')) {
                obj['remote_maxjitter'] = ApiClient.convertToType(data['remote_maxjitter'], 'Number');
            }
            if (data.hasOwnProperty('remote_maxrxploss')) {
                obj['remote_maxrxploss'] = ApiClient.convertToType(data['remote_maxrxploss'], 'Number');
            }
            if (data.hasOwnProperty('remote_minjitter')) {
                obj['remote_minjitter'] = ApiClient.convertToType(data['remote_minjitter'], 'Number');
            }
            if (data.hasOwnProperty('remote_minrxploss')) {
                obj['remote_minrxploss'] = ApiClient.convertToType(data['remote_minrxploss'], 'Number');
            }
            if (data.hasOwnProperty('remote_normdevjitter')) {
                obj['remote_normdevjitter'] = ApiClient.convertToType(data['remote_normdevjitter'], 'Number');
            }
            if (data.hasOwnProperty('remote_normdevrxploss')) {
                obj['remote_normdevrxploss'] = ApiClient.convertToType(data['remote_normdevrxploss'], 'Number');
            }
            if (data.hasOwnProperty('remote_ssrc')) {
                obj['remote_ssrc'] = ApiClient.convertToType(data['remote_ssrc'], 'Number');
            }
            if (data.hasOwnProperty('remote_stdevjitter')) {
                obj['remote_stdevjitter'] = ApiClient.convertToType(data['remote_stdevjitter'], 'Number');
            }
            if (data.hasOwnProperty('remote_stdevrxploss')) {
                obj['remote_stdevrxploss'] = ApiClient.convertToType(data['remote_stdevrxploss'], 'Number');
            }
            if (data.hasOwnProperty('rtt')) {
                obj['rtt'] = ApiClient.convertToType(data['rtt'], 'Number');
            }
            if (data.hasOwnProperty('rxcount')) {
                obj['rxcount'] = ApiClient.convertToType(data['rxcount'], 'Number');
            }
            if (data.hasOwnProperty('rxjitter')) {
                obj['rxjitter'] = ApiClient.convertToType(data['rxjitter'], 'Number');
            }
            if (data.hasOwnProperty('rxoctetcount')) {
                obj['rxoctetcount'] = ApiClient.convertToType(data['rxoctetcount'], 'Number');
            }
            if (data.hasOwnProperty('rxploss')) {
                obj['rxploss'] = ApiClient.convertToType(data['rxploss'], 'Number');
            }
            if (data.hasOwnProperty('stdevrtt')) {
                obj['stdevrtt'] = ApiClient.convertToType(data['stdevrtt'], 'Number');
            }
            if (data.hasOwnProperty('txcount')) {
                obj['txcount'] = ApiClient.convertToType(data['txcount'], 'Number');
            }
            if (data.hasOwnProperty('txjitter')) {
                obj['txjitter'] = ApiClient.convertToType(data['txjitter'], 'Number');
            }
            if (data.hasOwnProperty('txoctetcount')) {
                obj['txoctetcount'] = ApiClient.convertToType(data['txoctetcount'], 'Number');
            }
            if (data.hasOwnProperty('txploss')) {
                obj['txploss'] = ApiClient.convertToType(data['txploss'], 'Number');
            }
        }
        return obj;
    }

    /**
    * The Asterisk channel's unique ID that owns this instance.
    * @member {String} channel_uniqueid
    */
    'channel_uniqueid' = undefined;
    /**
    * Maximum jitter on local side.
    * @member {Number} local_maxjitter
    */
    'local_maxjitter' = undefined;
    /**
    * Maximum number of packets lost on local side.
    * @member {Number} local_maxrxploss
    */
    'local_maxrxploss' = undefined;
    /**
    * Minimum jitter on local side.
    * @member {Number} local_minjitter
    */
    'local_minjitter' = undefined;
    /**
    * Minimum number of packets lost on local side.
    * @member {Number} local_minrxploss
    */
    'local_minrxploss' = undefined;
    /**
    * Average jitter on local side.
    * @member {Number} local_normdevjitter
    */
    'local_normdevjitter' = undefined;
    /**
    * Average number of packets lost on local side.
    * @member {Number} local_normdevrxploss
    */
    'local_normdevrxploss' = undefined;
    /**
    * Our SSRC.
    * @member {Number} local_ssrc
    */
    'local_ssrc' = undefined;
    /**
    * Standard deviation jitter on local side.
    * @member {Number} local_stdevjitter
    */
    'local_stdevjitter' = undefined;
    /**
    * Standard deviation packets lost on local side.
    * @member {Number} local_stdevrxploss
    */
    'local_stdevrxploss' = undefined;
    /**
    * Maximum round trip time.
    * @member {Number} maxrtt
    */
    'maxrtt' = undefined;
    /**
    * Minimum round trip time.
    * @member {Number} minrtt
    */
    'minrtt' = undefined;
    /**
    * Average round trip time.
    * @member {Number} normdevrtt
    */
    'normdevrtt' = undefined;
    /**
    * Maximum jitter on remote side.
    * @member {Number} remote_maxjitter
    */
    'remote_maxjitter' = undefined;
    /**
    * Maximum number of packets lost on remote side.
    * @member {Number} remote_maxrxploss
    */
    'remote_maxrxploss' = undefined;
    /**
    * Minimum jitter on remote side.
    * @member {Number} remote_minjitter
    */
    'remote_minjitter' = undefined;
    /**
    * Minimum number of packets lost on remote side.
    * @member {Number} remote_minrxploss
    */
    'remote_minrxploss' = undefined;
    /**
    * Average jitter on remote side.
    * @member {Number} remote_normdevjitter
    */
    'remote_normdevjitter' = undefined;
    /**
    * Average number of packets lost on remote side.
    * @member {Number} remote_normdevrxploss
    */
    'remote_normdevrxploss' = undefined;
    /**
    * Their SSRC.
    * @member {Number} remote_ssrc
    */
    'remote_ssrc' = undefined;
    /**
    * Standard deviation jitter on remote side.
    * @member {Number} remote_stdevjitter
    */
    'remote_stdevjitter' = undefined;
    /**
    * Standard deviation packets lost on remote side.
    * @member {Number} remote_stdevrxploss
    */
    'remote_stdevrxploss' = undefined;
    /**
    * Total round trip time.
    * @member {Number} rtt
    */
    'rtt' = undefined;
    /**
    * Number of packets received.
    * @member {Number} rxcount
    */
    'rxcount' = undefined;
    /**
    * Jitter on received packets.
    * @member {Number} rxjitter
    */
    'rxjitter' = undefined;
    /**
    * Number of octets received.
    * @member {Number} rxoctetcount
    */
    'rxoctetcount' = undefined;
    /**
    * Number of received packets lost.
    * @member {Number} rxploss
    */
    'rxploss' = undefined;
    /**
    * Standard deviation round trip time.
    * @member {Number} stdevrtt
    */
    'stdevrtt' = undefined;
    /**
    * Number of packets transmitted.
    * @member {Number} txcount
    */
    'txcount' = undefined;
    /**
    * Jitter on transmitted packets.
    * @member {Number} txjitter
    */
    'txjitter' = undefined;
    /**
    * Number of octets transmitted.
    * @member {Number} txoctetcount
    */
    'txoctetcount' = undefined;
    /**
    * Number of transmitted packets lost.
    * @member {Number} txploss
    */
    'txploss' = undefined;




}
