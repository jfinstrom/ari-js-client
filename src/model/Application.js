/**
 * localhost:8088
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
* The Application model module.
* @module model/Application
* @version 6.0.0
*/
export default class Application {
    /**
    * Constructs a new <code>Application</code>.
    * Details of a Stasis application
    * @alias module:model/Application
    * @class
    * @param bridgeIds {Array.<String>} Id's for bridges subscribed to.
    * @param channelIds {Array.<String>} Id's for channels subscribed to.
    * @param deviceNames {Array.<String>} Names of the devices subscribed to.
    * @param endpointIds {Array.<String>} {tech}/{resource} for endpoints subscribed to.
    * @param eventsAllowed {Array.<Object>} Event types sent to the application.
    * @param eventsDisallowed {Array.<Object>} Event types not sent to the application.
    * @param name {String} Name of this application
    */

    constructor(bridgeIds, channelIds, deviceNames, endpointIds, eventsAllowed, eventsDisallowed, name) {
        
        
        this['bridge_ids'] = bridgeIds;
        this['channel_ids'] = channelIds;
        this['device_names'] = deviceNames;
        this['endpoint_ids'] = endpointIds;
        this['events_allowed'] = eventsAllowed;
        this['events_disallowed'] = eventsDisallowed;
        this['name'] = name;
        
    }

    /**
    * Constructs a <code>Application</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/Application} obj Optional instance to populate.
    * @return {module:model/Application} The populated <code>Application</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Application();
                        
            
            if (data.hasOwnProperty('bridge_ids')) {
                obj['bridge_ids'] = ApiClient.convertToType(data['bridge_ids'], ['String']);
            }
            if (data.hasOwnProperty('channel_ids')) {
                obj['channel_ids'] = ApiClient.convertToType(data['channel_ids'], ['String']);
            }
            if (data.hasOwnProperty('device_names')) {
                obj['device_names'] = ApiClient.convertToType(data['device_names'], ['String']);
            }
            if (data.hasOwnProperty('endpoint_ids')) {
                obj['endpoint_ids'] = ApiClient.convertToType(data['endpoint_ids'], ['String']);
            }
            if (data.hasOwnProperty('events_allowed')) {
                obj['events_allowed'] = ApiClient.convertToType(data['events_allowed'], [Object]);
            }
            if (data.hasOwnProperty('events_disallowed')) {
                obj['events_disallowed'] = ApiClient.convertToType(data['events_disallowed'], [Object]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
    * Id's for bridges subscribed to.
    * @member {Array.<String>} bridge_ids
    */
    'bridge_ids' = undefined;
    /**
    * Id's for channels subscribed to.
    * @member {Array.<String>} channel_ids
    */
    'channel_ids' = undefined;
    /**
    * Names of the devices subscribed to.
    * @member {Array.<String>} device_names
    */
    'device_names' = undefined;
    /**
    * {tech}/{resource} for endpoints subscribed to.
    * @member {Array.<String>} endpoint_ids
    */
    'endpoint_ids' = undefined;
    /**
    * Event types sent to the application.
    * @member {Array.<Object>} events_allowed
    */
    'events_allowed' = undefined;
    /**
    * Event types not sent to the application.
    * @member {Array.<Object>} events_disallowed
    */
    'events_disallowed' = undefined;
    /**
    * Name of this application
    * @member {String} name
    */
    'name' = undefined;




}
