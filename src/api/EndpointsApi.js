/**
 * localhost:8088
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Containers from '../model/Containers';
import Endpoint from '../model/Endpoint';

/**
* Endpoints service.
* @module api/EndpointsApi
* @version 6.0.0
*/
export default class EndpointsApi {

    /**
    * Constructs a new EndpointsApi. 
    * @alias module:api/EndpointsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getendpoint operation.
     * @callback module:api/EndpointsApi~getendpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Endpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Details for an endpoint.
     * @param {module:api/EndpointsApi~getendpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Endpoint}
     */
    getendpoint(tech, resource, callback) {
      let postBody = null;

      let pathParams = {
        'tech': tech,
        'resource': resource
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Endpoint;

      return this.apiClient.callApi(
        '/endpoints/{tech}/{resource}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listByTech operation.
     * @callback module:api/EndpointsApi~listByTechCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Endpoint>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List available endoints for a given endpoint technology.
     * @param {module:api/EndpointsApi~listByTechCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Endpoint>}
     */
    listByTech(tech, callback) {
      let postBody = null;

      let pathParams = {
        'tech': tech
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Endpoint];

      return this.apiClient.callApi(
        '/endpoints/{tech}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listendpoints operation.
     * @callback module:api/EndpointsApi~listendpointsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Endpoint>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all endpoints.
     * @param {module:api/EndpointsApi~listendpointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Endpoint>}
     */
    listendpoints(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Endpoint];

      return this.apiClient.callApi(
        '/endpoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the sendMessage operation.
     * @callback module:api/EndpointsApi~sendMessageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a message to some technology URI or endpoint.
     * @param {Object} opts Optional parameters
     * @param {module:api/EndpointsApi~sendMessageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sendMessage(to, from, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
        'to': to,
        'from': from,
        'body': opts['body']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['*/*'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/endpoints/sendMessage', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the sendMessageToEndpoint operation.
     * @callback module:api/EndpointsApi~sendMessageToEndpointCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a message to some endpoint in a technology.
     * @param {Object} opts Optional parameters
     * @param {module:api/EndpointsApi~sendMessageToEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sendMessageToEndpoint(tech, resource, from, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        'tech': tech,
        'resource': resource
      };
      let queryParams = {
        'from': from,
        'body': opts['body']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['*/*'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/endpoints/{tech}/{resource}/sendMessage', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
