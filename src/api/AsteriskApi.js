/**
 * Asterisk ARI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import AsteriskInfo from '../model/AsteriskInfo';
import AsteriskPing from '../model/AsteriskPing';
import ConfigTuple from '../model/ConfigTuple';
import Containers from '../model/Containers';
import LogChannel from '../model/LogChannel';
import Module from '../model/Module';
import Variable from '../model/Variable';

/**
* Asterisk service.
* @module api/AsteriskApi
* @version 6.0.0
*/
export default class AsteriskApi {

    /**
    * Constructs a new AsteriskApi. 
    * @alias module:api/AsteriskApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addLog operation.
     * @callback module:api/AsteriskApi~addLogCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a log channel.
     * @param {module:api/AsteriskApi~addLogCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addLog(logChannelName, configuration, callback) {
      let postBody = null;

      let pathParams = {
        'logChannelName': logChannelName
      };
      let queryParams = {
        'configuration': configuration
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/asterisk/logging/{logChannelName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteLog operation.
     * @callback module:api/AsteriskApi~deleteLogCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a log channel.
     * @param {module:api/AsteriskApi~deleteLogCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteLog(logChannelName, callback) {
      let postBody = null;

      let pathParams = {
        'logChannelName': logChannelName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/asterisk/logging/{logChannelName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteObject operation.
     * @callback module:api/AsteriskApi~deleteObjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a dynamic configuration object.
     * @param {module:api/AsteriskApi~deleteObjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteObject(configClass, objectType, id, callback) {
      let postBody = null;

      let pathParams = {
        'configClass': configClass,
        'objectType': objectType,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/asterisk/config/dynamic/{configClass}/{objectType}/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getGlobalVar operation.
     * @callback module:api/AsteriskApi~getGlobalVarCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Variable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the value of a global variable.
     * @param {module:api/AsteriskApi~getGlobalVarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Variable}
     */
    getGlobalVar(variable, callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'variable': variable
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Variable;

      return this.apiClient.callApi(
        '/asterisk/variable', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getInfo operation.
     * @callback module:api/AsteriskApi~getInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AsteriskInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets Asterisk system information.
     * @param {Object} opts Optional parameters
     * @param {module:api/AsteriskApi~getInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AsteriskInfo}
     */
    getInfo(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'only': this.apiClient.buildCollectionParam(opts['only'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = AsteriskInfo;

      return this.apiClient.callApi(
        '/asterisk/info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getModule operation.
     * @callback module:api/AsteriskApi~getModuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Module} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Asterisk module information.
     * @param {module:api/AsteriskApi~getModuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Module}
     */
    getModule(moduleName, callback) {
      let postBody = null;

      let pathParams = {
        'moduleName': moduleName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Module;

      return this.apiClient.callApi(
        '/asterisk/modules/{moduleName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getObject operation.
     * @callback module:api/AsteriskApi~getObjectCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ConfigTuple>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a dynamic configuration object.
     * @param {module:api/AsteriskApi~getObjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ConfigTuple>}
     */
    getObject(configClass, objectType, id, callback) {
      let postBody = null;

      let pathParams = {
        'configClass': configClass,
        'objectType': objectType,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [ConfigTuple];

      return this.apiClient.callApi(
        '/asterisk/config/dynamic/{configClass}/{objectType}/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listLogChannels operation.
     * @callback module:api/AsteriskApi~listLogChannelsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LogChannel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets Asterisk log channel information.
     * @param {module:api/AsteriskApi~listLogChannelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LogChannel>}
     */
    listLogChannels(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [LogChannel];

      return this.apiClient.callApi(
        '/asterisk/logging', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listModules operation.
     * @callback module:api/AsteriskApi~listModulesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Module>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Asterisk modules.
     * @param {module:api/AsteriskApi~listModulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Module>}
     */
    listModules(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Module];

      return this.apiClient.callApi(
        '/asterisk/modules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the loadModule operation.
     * @callback module:api/AsteriskApi~loadModuleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Load an Asterisk module.
     * @param {module:api/AsteriskApi~loadModuleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    loadModule(moduleName, callback) {
      let postBody = null;

      let pathParams = {
        'moduleName': moduleName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/asterisk/modules/{moduleName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the ping operation.
     * @callback module:api/AsteriskApi~pingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AsteriskPing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Response pong message.
     * @param {module:api/AsteriskApi~pingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AsteriskPing}
     */
    ping(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = AsteriskPing;

      return this.apiClient.callApi(
        '/asterisk/ping', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the reloadModule operation.
     * @callback module:api/AsteriskApi~reloadModuleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reload an Asterisk module.
     * @param {module:api/AsteriskApi~reloadModuleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reloadModule(moduleName, callback) {
      let postBody = null;

      let pathParams = {
        'moduleName': moduleName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/asterisk/modules/{moduleName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the rotateLog operation.
     * @callback module:api/AsteriskApi~rotateLogCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rotates a log channel.
     * @param {module:api/AsteriskApi~rotateLogCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rotateLog(logChannelName, callback) {
      let postBody = null;

      let pathParams = {
        'logChannelName': logChannelName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/asterisk/logging/{logChannelName}/rotate', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the setGlobalVar operation.
     * @callback module:api/AsteriskApi~setGlobalVarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the value of a global variable.
     * @param {Object} opts Optional parameters
     * @param {module:api/AsteriskApi~setGlobalVarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setGlobalVar(variable, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'variable': variable,
        'value': opts['value']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/asterisk/variable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the unloadModule operation.
     * @callback module:api/AsteriskApi~unloadModuleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unload an Asterisk module.
     * @param {module:api/AsteriskApi~unloadModuleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unloadModule(moduleName, callback) {
      let postBody = null;

      let pathParams = {
        'moduleName': moduleName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/asterisk/modules/{moduleName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateObject operation.
     * @callback module:api/AsteriskApi~updateObjectCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ConfigTuple>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a dynamic configuration object.
     * @param {Object} opts Optional parameters
     * @param {module:api/AsteriskApi~updateObjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ConfigTuple>}
     */
    updateObject(configClass, objectType, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        'configClass': configClass,
        'objectType': objectType,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['*/*'];
      let accepts = ['*/*'];
      let returnType = [ConfigTuple];

      return this.apiClient.callApi(
        '/asterisk/config/dynamic/{configClass}/{objectType}/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
