/**
 * localhost:8088
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Bridge from '../model/Bridge';
import LiveRecording from '../model/LiveRecording';
import Playback from '../model/Playback';

/**
* Bridges service.
* @module api/BridgesApi
* @version 6.0.0
*/
export default class BridgesApi {

    /**
    * Constructs a new BridgesApi. 
    * @alias module:api/BridgesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addChannel operation.
     * @callback module:api/BridgesApi~addChannelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a channel to a bridge.
     * @param {Object} opts Optional parameters
     * @param {module:api/BridgesApi~addChannelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addChannel(bridgeId, channel, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'bridgeId': bridgeId
      };
      let queryParams = {
        'channel': this.apiClient.buildCollectionParam(channel, 'csv'),
        'role': opts['role'],
        'absorbDTMF': opts['absorbDTMF'],
        'mute': opts['mute'],
        'inhibitConnectedLineUpdates': opts['inhibitConnectedLineUpdates']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/bridges/{bridgeId}/addChannel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the clearVideoSource operation.
     * @callback module:api/BridgesApi~clearVideoSourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes any explicit video source in a multi-party mixing bridge. This operation has no effect on bridges with two or fewer participants. When no explicit video source is set, talk detection will be used to determine the active video stream.
     * @param {module:api/BridgesApi~clearVideoSourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    clearVideoSource(bridgeId, callback) {
      let postBody = null;

      let pathParams = {
        'bridgeId': bridgeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/bridges/{bridgeId}/videoSource', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the create operation.
     * @callback module:api/BridgesApi~createCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bridge} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new bridge.
     * This bridge persists until it has been shut down, or Asterisk has been shut down.
     * @param {Object} opts Optional parameters
     * @param {module:api/BridgesApi~createCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bridge}
     */
    create(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'type': opts['type'],
        'bridgeId': opts['bridgeId'],
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Bridge;

      return this.apiClient.callApi(
        '/bridges', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createWithId operation.
     * @callback module:api/BridgesApi~createWithIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bridge} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new bridge or updates an existing one.
     * This bridge persists until it has been shut down, or Asterisk has been shut down.
     * @param {Object} opts Optional parameters
     * @param {module:api/BridgesApi~createWithIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bridge}
     */
    createWithId(bridgeId, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'bridgeId': bridgeId
      };
      let queryParams = {
        'type': opts['type'],
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Bridge;

      return this.apiClient.callApi(
        '/bridges/{bridgeId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the destroy operation.
     * @callback module:api/BridgesApi~destroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Shut down a bridge.
     * If any channels are in this bridge, they will be removed and resume whatever they were doing beforehand.
     * @param {module:api/BridgesApi~destroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    destroy(bridgeId, callback) {
      let postBody = null;

      let pathParams = {
        'bridgeId': bridgeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/bridges/{bridgeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getbridge operation.
     * @callback module:api/BridgesApi~getbridgeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bridge} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get bridge details.
     * @param {module:api/BridgesApi~getbridgeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bridge}
     */
    getbridge(bridgeId, callback) {
      let postBody = null;

      let pathParams = {
        'bridgeId': bridgeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Bridge;

      return this.apiClient.callApi(
        '/bridges/{bridgeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listbridges operation.
     * @callback module:api/BridgesApi~listbridgesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Bridge>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all active bridges in Asterisk.
     * @param {module:api/BridgesApi~listbridgesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Bridge>}
     */
    listbridges(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Bridge];

      return this.apiClient.callApi(
        '/bridges', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the play operation.
     * @callback module:api/BridgesApi~playCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Playback} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start playback of media on a bridge.
     * The media URI may be any of a number of URI&#x27;s. Currently sound:, recording:, number:, digits:, characters:, and tone: URI&#x27;s are supported. This operation creates a playback resource that can be used to control the playback of media (pause, rewind, fast forward, etc.)
     * @param {Object} opts Optional parameters
     * @param {module:api/BridgesApi~playCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Playback}
     */
    play(bridgeId, media, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'bridgeId': bridgeId
      };
      let queryParams = {
        'media': this.apiClient.buildCollectionParam(media, 'csv'),
        'lang': opts['lang'],
        'offsetms': opts['offsetms'],
        'skipms': opts['skipms'],
        'playbackId': opts['playbackId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Playback;

      return this.apiClient.callApi(
        '/bridges/{bridgeId}/play', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the playWithId operation.
     * @callback module:api/BridgesApi~playWithIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Playback} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start playback of media on a bridge.
     * The media URI may be any of a number of URI&#x27;s. Currently sound:, recording:, number:, digits:, characters:, and tone: URI&#x27;s are supported. This operation creates a playback resource that can be used to control the playback of media (pause, rewind, fast forward, etc.)
     * @param {Object} opts Optional parameters
     * @param {module:api/BridgesApi~playWithIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Playback}
     */
    playWithId(bridgeId, playbackId, media, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'bridgeId': bridgeId,
        'playbackId': playbackId
      };
      let queryParams = {
        'media': this.apiClient.buildCollectionParam(media, 'csv'),
        'lang': opts['lang'],
        'offsetms': opts['offsetms'],
        'skipms': opts['skipms']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Playback;

      return this.apiClient.callApi(
        '/bridges/{bridgeId}/play/{playbackId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the record operation.
     * @callback module:api/BridgesApi~recordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LiveRecording} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a recording.
     * This records the mixed audio from all channels participating in this bridge.
     * @param {Object} opts Optional parameters
     * @param {module:api/BridgesApi~recordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LiveRecording}
     */
    record(bridgeId, name, format, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'bridgeId': bridgeId
      };
      let queryParams = {
        'name': name,
        'format': format,
        'maxDurationSeconds': opts['maxDurationSeconds'],
        'maxSilenceSeconds': opts['maxSilenceSeconds'],
        'ifExists': opts['ifExists'],
        'beep': opts['beep'],
        'terminateOn': opts['terminateOn']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = LiveRecording;

      return this.apiClient.callApi(
        '/bridges/{bridgeId}/record', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the removeChannel operation.
     * @callback module:api/BridgesApi~removeChannelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a channel from a bridge.
     * @param {module:api/BridgesApi~removeChannelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeChannel(bridgeId, channel, callback) {
      let postBody = null;

      let pathParams = {
        'bridgeId': bridgeId
      };
      let queryParams = {
        'channel': this.apiClient.buildCollectionParam(channel, 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/bridges/{bridgeId}/removeChannel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the setVideoSource operation.
     * @callback module:api/BridgesApi~setVideoSourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set a channel as the video source in a multi-party mixing bridge. This operation has no effect on bridges with two or fewer participants.
     * @param {module:api/BridgesApi~setVideoSourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setVideoSource(bridgeId, channelId, callback) {
      let postBody = null;

      let pathParams = {
        'bridgeId': bridgeId,
        'channelId': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/bridges/{bridgeId}/videoSource/{channelId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the startMoh operation.
     * @callback module:api/BridgesApi~startMohCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Play music on hold to a bridge or change the MOH class that is playing.
     * @param {Object} opts Optional parameters
     * @param {module:api/BridgesApi~startMohCallback} callback The callback function, accepting three arguments: error, data, response
     */
    startMoh(bridgeId, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'bridgeId': bridgeId
      };
      let queryParams = {
        'mohClass': opts['mohClass']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/bridges/{bridgeId}/moh', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the stopMoh operation.
     * @callback module:api/BridgesApi~stopMohCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop playing music on hold to a bridge.
     * This will only stop music on hold being played via POST bridges/{bridgeId}/moh.
     * @param {module:api/BridgesApi~stopMohCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stopMoh(bridgeId, callback) {
      let postBody = null;

      let pathParams = {
        'bridgeId': bridgeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/bridges/{bridgeId}/moh', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
