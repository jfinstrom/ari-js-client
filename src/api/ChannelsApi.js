/**
 * localhost:8088
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Channel from '../model/Channel';
import Containers from '../model/Containers';
import LiveRecording from '../model/LiveRecording';
import Playback from '../model/Playback';
import RTPstat from '../model/RTPstat';
import Variable from '../model/Variable';

/**
* Channels service.
* @module api/ChannelsApi
* @version 6.0.0
*/
export default class ChannelsApi {

    /**
    * Constructs a new ChannelsApi. 
    * @alias module:api/ChannelsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addMoh operation.
     * @callback module:api/ChannelsApi~addMohCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Play music on hold to a channel.
     * Using media operations such as /play on a channel playing MOH in this manner will suspend MOH without resuming automatically. If continuing music on hold is desired, the stasis application must reinitiate music on hold.
     * @param {Object} opts Optional parameters
     * @param {module:api/ChannelsApi~addMohCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addMoh(channelId, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'channelId': channelId
      };
      let queryParams = {
        'mohClass': opts['mohClass']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/channels/{channelId}/moh', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the answer operation.
     * @callback module:api/ChannelsApi~answerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Answer a channel.
     * @param {module:api/ChannelsApi~answerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    answer(channelId, callback) {
      let postBody = null;

      let pathParams = {
        'channelId': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/channels/{channelId}/answer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the continueInDialplan operation.
     * @callback module:api/ChannelsApi~continueInDialplanCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exit application; continue execution in the dialplan.
     * @param {Object} opts Optional parameters
     * @param {module:api/ChannelsApi~continueInDialplanCallback} callback The callback function, accepting three arguments: error, data, response
     */
    continueInDialplan(channelId, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'channelId': channelId
      };
      let queryParams = {
        'context': opts['context'],
        'extension': opts['extension'],
        'priority': opts['priority'],
        'label': opts['label']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/channels/{channelId}/continue', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createchannel operation.
     * @callback module:api/ChannelsApi~createchannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Channel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create channel.
     * @param {Object} opts Optional parameters
     * @param {module:api/ChannelsApi~createchannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Channel}
     */
    createchannel(endpoint, app, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
        'endpoint': endpoint,
        'app': app,
        'appArgs': opts['appArgs'],
        'channelId': opts['channelId'],
        'otherChannelId': opts['otherChannelId'],
        'originator': opts['originator'],
        'formats': opts['formats']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['*/*'];
      let accepts = ['*/*'];
      let returnType = Channel;

      return this.apiClient.callApi(
        '/channels/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deletemoh operation.
     * @callback module:api/ChannelsApi~deletemohCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop playing music on hold to a channel.
     * @param {module:api/ChannelsApi~deletemohCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletemoh(channelId, callback) {
      let postBody = null;

      let pathParams = {
        'channelId': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/channels/{channelId}/moh', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the dial operation.
     * @callback module:api/ChannelsApi~dialCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dial a created channel.
     * @param {Object} opts Optional parameters
     * @param {module:api/ChannelsApi~dialCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dial(channelId, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'channelId': channelId
      };
      let queryParams = {
        'caller': opts['caller'],
        'timeout': opts['timeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/channels/{channelId}/dial', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the externalMedia operation.
     * @callback module:api/ChannelsApi~externalMediaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Channel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start an External Media session.
     * Create a channel to an External Media source/sink.
     * @param {Object} opts Optional parameters
     * @param {module:api/ChannelsApi~externalMediaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Channel}
     */
    externalMedia(app, externalHost, format, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
        'channelId': opts['channelId'],
        'app': app,
        'external_host': externalHost,
        'encapsulation': opts['encapsulation'],
        'transport': opts['transport'],
        'connection_type': opts['connectionType'],
        'format': format,
        'direction': opts['direction'],
        'data': opts['data']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['*/*'];
      let accepts = ['*/*'];
      let returnType = Channel;

      return this.apiClient.callApi(
        '/channels/externalMedia', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getChannelVar operation.
     * @callback module:api/ChannelsApi~getChannelVarCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Variable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the value of a channel variable or function.
     * @param {module:api/ChannelsApi~getChannelVarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Variable}
     */
    getChannelVar(channelId, variable, callback) {
      let postBody = null;

      let pathParams = {
        'channelId': channelId
      };
      let queryParams = {
        'variable': variable
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Variable;

      return this.apiClient.callApi(
        '/channels/{channelId}/variable', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getchannel operation.
     * @callback module:api/ChannelsApi~getchannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Channel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Channel details.
     * @param {module:api/ChannelsApi~getchannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Channel}
     */
    getchannel(channelId, callback) {
      let postBody = null;

      let pathParams = {
        'channelId': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Channel;

      return this.apiClient.callApi(
        '/channels/{channelId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the hangup operation.
     * @callback module:api/ChannelsApi~hangupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete (i.e. hangup) a channel.
     * @param {Object} opts Optional parameters
     * @param {module:api/ChannelsApi~hangupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    hangup(channelId, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'channelId': channelId
      };
      let queryParams = {
        'reason_code': opts['reasonCode'],
        'reason': opts['reason']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/channels/{channelId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the hold operation.
     * @callback module:api/ChannelsApi~holdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Hold a channel.
     * @param {module:api/ChannelsApi~holdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    hold(channelId, callback) {
      let postBody = null;

      let pathParams = {
        'channelId': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/channels/{channelId}/hold', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listchannels operation.
     * @callback module:api/ChannelsApi~listchannelsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Channel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all active channels in Asterisk.
     * @param {module:api/ChannelsApi~listchannelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Channel>}
     */
    listchannels(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Channel];

      return this.apiClient.callApi(
        '/channels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the move operation.
     * @callback module:api/ChannelsApi~moveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move the channel from one Stasis application to another.
     * @param {Object} opts Optional parameters
     * @param {module:api/ChannelsApi~moveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    move(channelId, app, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'channelId': channelId
      };
      let queryParams = {
        'app': app,
        'appArgs': opts['appArgs']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/channels/{channelId}/move', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the mute operation.
     * @callback module:api/ChannelsApi~muteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mute a channel.
     * @param {Object} opts Optional parameters
     * @param {module:api/ChannelsApi~muteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mute(channelId, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'channelId': channelId
      };
      let queryParams = {
        'direction': opts['direction']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/channels/{channelId}/mute', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the originate operation.
     * @callback module:api/ChannelsApi~originateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Channel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new channel (originate).
     * The new channel is created immediately and a snapshot of it returned. If a Stasis application is provided it will be automatically subscribed to the originated channel for further events and updates.
     * @param {Object} opts Optional parameters
     * @param {module:api/ChannelsApi~originateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Channel}
     */
    originate(endpoint, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
        'endpoint': endpoint,
        'extension': opts['extension'],
        'context': opts['context'],
        'priority': opts['priority'],
        'label': opts['label'],
        'app': opts['app'],
        'appArgs': opts['appArgs'],
        'callerId': opts['callerId'],
        'timeout': opts['timeout'],
        'channelId': opts['channelId'],
        'otherChannelId': opts['otherChannelId'],
        'originator': opts['originator'],
        'formats': opts['formats']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['*/*'];
      let accepts = ['*/*'];
      let returnType = Channel;

      return this.apiClient.callApi(
        '/channels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the originateWithId operation.
     * @callback module:api/ChannelsApi~originateWithIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Channel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new channel (originate with id).
     * The new channel is created immediately and a snapshot of it returned. If a Stasis application is provided it will be automatically subscribed to the originated channel for further events and updates.
     * @param {Object} opts Optional parameters
     * @param {module:api/ChannelsApi~originateWithIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Channel}
     */
    originateWithId(channelId, endpoint, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        'channelId': channelId
      };
      let queryParams = {
        'endpoint': endpoint,
        'extension': opts['extension'],
        'context': opts['context'],
        'priority': opts['priority'],
        'label': opts['label'],
        'app': opts['app'],
        'appArgs': opts['appArgs'],
        'callerId': opts['callerId'],
        'timeout': opts['timeout'],
        'otherChannelId': opts['otherChannelId'],
        'originator': opts['originator'],
        'formats': opts['formats']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['*/*'];
      let accepts = ['*/*'];
      let returnType = Channel;

      return this.apiClient.callApi(
        '/channels/{channelId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the playSoundWithId operation.
     * @callback module:api/ChannelsApi~playSoundWithIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Playback} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start playback of media and specify the playbackId.
     * The media URI may be any of a number of URI&#x27;s. Currently sound:, recording:, number:, digits:, characters:, and tone: URI&#x27;s are supported. This operation creates a playback resource that can be used to control the playback of media (pause, rewind, fast forward, etc.)
     * @param {Object} opts Optional parameters
     * @param {module:api/ChannelsApi~playSoundWithIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Playback}
     */
    playSoundWithId(channelId, playbackId, media, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'channelId': channelId,
        'playbackId': playbackId
      };
      let queryParams = {
        'media': this.apiClient.buildCollectionParam(media, 'csv'),
        'lang': opts['lang'],
        'offsetms': opts['offsetms'],
        'skipms': opts['skipms']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Playback;

      return this.apiClient.callApi(
        '/channels/{channelId}/play/{playbackId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the playsound operation.
     * @callback module:api/ChannelsApi~playsoundCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Playback} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start playback of media.
     * The media URI may be any of a number of URI&#x27;s. Currently sound:, recording:, number:, digits:, characters:, and tone: URI&#x27;s are supported. This operation creates a playback resource that can be used to control the playback of media (pause, rewind, fast forward, etc.)
     * @param {Object} opts Optional parameters
     * @param {module:api/ChannelsApi~playsoundCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Playback}
     */
    playsound(channelId, media, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'channelId': channelId
      };
      let queryParams = {
        'media': this.apiClient.buildCollectionParam(media, 'csv'),
        'lang': opts['lang'],
        'offsetms': opts['offsetms'],
        'skipms': opts['skipms'],
        'playbackId': opts['playbackId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Playback;

      return this.apiClient.callApi(
        '/channels/{channelId}/play', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the recordchannel operation.
     * @callback module:api/ChannelsApi~recordchannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LiveRecording} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a recording.
     * Record audio from a channel. Note that this will not capture audio sent to the channel. The bridge itself has a record feature if that&#x27;s what you want.
     * @param {Object} opts Optional parameters
     * @param {module:api/ChannelsApi~recordchannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LiveRecording}
     */
    recordchannel(channelId, name, format, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'channelId': channelId
      };
      let queryParams = {
        'name': name,
        'format': format,
        'maxDurationSeconds': opts['maxDurationSeconds'],
        'maxSilenceSeconds': opts['maxSilenceSeconds'],
        'ifExists': opts['ifExists'],
        'beep': opts['beep'],
        'terminateOn': opts['terminateOn']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = LiveRecording;

      return this.apiClient.callApi(
        '/channels/{channelId}/record', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the redirect operation.
     * @callback module:api/ChannelsApi~redirectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Redirect the channel to a different location.
     * @param {module:api/ChannelsApi~redirectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    redirect(channelId, endpoint, callback) {
      let postBody = null;

      let pathParams = {
        'channelId': channelId
      };
      let queryParams = {
        'endpoint': endpoint
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/channels/{channelId}/redirect', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the ring operation.
     * @callback module:api/ChannelsApi~ringCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Indicate ringing to a channel.
     * @param {module:api/ChannelsApi~ringCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ring(channelId, callback) {
      let postBody = null;

      let pathParams = {
        'channelId': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/channels/{channelId}/ring', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the ringStop operation.
     * @callback module:api/ChannelsApi~ringStopCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop ringing indication on a channel if locally generated.
     * @param {module:api/ChannelsApi~ringStopCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ringStop(channelId, callback) {
      let postBody = null;

      let pathParams = {
        'channelId': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/channels/{channelId}/ring', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the rtpstatistics operation.
     * @callback module:api/ChannelsApi~rtpstatisticsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RTPstat} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RTP stats on a channel.
     * @param {module:api/ChannelsApi~rtpstatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RTPstat}
     */
    rtpstatistics(channelId, callback) {
      let postBody = null;

      let pathParams = {
        'channelId': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = RTPstat;

      return this.apiClient.callApi(
        '/channels/{channelId}/rtp_statistics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the sendDTMF operation.
     * @callback module:api/ChannelsApi~sendDTMFCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send provided DTMF to a given channel.
     * @param {Object} opts Optional parameters
     * @param {module:api/ChannelsApi~sendDTMFCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sendDTMF(channelId, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'channelId': channelId
      };
      let queryParams = {
        'dtmf': opts['dtmf'],
        'before': opts['before'],
        'between': opts['between'],
        'duration': opts['duration'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/channels/{channelId}/dtmf', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the setChannelVar operation.
     * @callback module:api/ChannelsApi~setChannelVarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the value of a channel variable or function.
     * @param {Object} opts Optional parameters
     * @param {module:api/ChannelsApi~setChannelVarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setChannelVar(channelId, variable, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'channelId': channelId
      };
      let queryParams = {
        'variable': variable,
        'value': opts['value']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/channels/{channelId}/variable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the snoopChannel operation.
     * @callback module:api/ChannelsApi~snoopChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Channel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start snooping.
     * Snoop (spy/whisper) on a specific channel.
     * @param {Object} opts Optional parameters
     * @param {module:api/ChannelsApi~snoopChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Channel}
     */
    snoopChannel(channelId, app, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'channelId': channelId
      };
      let queryParams = {
        'spy': opts['spy'],
        'whisper': opts['whisper'],
        'app': app,
        'appArgs': opts['appArgs'],
        'snoopId': opts['snoopId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Channel;

      return this.apiClient.callApi(
        '/channels/{channelId}/snoop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the snoopChannelWithId operation.
     * @callback module:api/ChannelsApi~snoopChannelWithIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Channel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start snooping.
     * Snoop (spy/whisper) on a specific channel.
     * @param {Object} opts Optional parameters
     * @param {module:api/ChannelsApi~snoopChannelWithIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Channel}
     */
    snoopChannelWithId(channelId, snoopId, app, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'channelId': channelId,
        'snoopId': snoopId
      };
      let queryParams = {
        'spy': opts['spy'],
        'whisper': opts['whisper'],
        'app': app,
        'appArgs': opts['appArgs']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Channel;

      return this.apiClient.callApi(
        '/channels/{channelId}/snoop/{snoopId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the startSilence operation.
     * @callback module:api/ChannelsApi~startSilenceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Play silence to a channel.
     * Using media operations such as /play on a channel playing silence in this manner will suspend silence without resuming automatically.
     * @param {module:api/ChannelsApi~startSilenceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    startSilence(channelId, callback) {
      let postBody = null;

      let pathParams = {
        'channelId': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/channels/{channelId}/silence', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the stopSilence operation.
     * @callback module:api/ChannelsApi~stopSilenceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop playing silence to a channel.
     * @param {module:api/ChannelsApi~stopSilenceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stopSilence(channelId, callback) {
      let postBody = null;

      let pathParams = {
        'channelId': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/channels/{channelId}/silence', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the unhold operation.
     * @callback module:api/ChannelsApi~unholdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a channel from hold.
     * @param {module:api/ChannelsApi~unholdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unhold(channelId, callback) {
      let postBody = null;

      let pathParams = {
        'channelId': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/channels/{channelId}/hold', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the unmute operation.
     * @callback module:api/ChannelsApi~unmuteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unmute a channel.
     * @param {Object} opts Optional parameters
     * @param {module:api/ChannelsApi~unmuteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unmute(channelId, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'channelId': channelId
      };
      let queryParams = {
        'direction': opts['direction']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/channels/{channelId}/mute', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
