/**
 * localhost:8088
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Playback from '../model/Playback';

/**
* Playbacks service.
* @module api/PlaybacksApi
* @version 6.0.0
*/
export default class PlaybacksApi {

    /**
    * Constructs a new PlaybacksApi. 
    * @alias module:api/PlaybacksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the control operation.
     * @callback module:api/PlaybacksApi~controlCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Control a playback.
     * @param {module:api/PlaybacksApi~controlCallback} callback The callback function, accepting three arguments: error, data, response
     */
    control(playbackId, operation, callback) {
      let postBody = null;

      let pathParams = {
        'playbackId': playbackId
      };
      let queryParams = {
        'operation': operation
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/playbacks/{playbackId}/control', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getplayback operation.
     * @callback module:api/PlaybacksApi~getplaybackCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Playback} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a playback&#x27;s details.
     * @param {module:api/PlaybacksApi~getplaybackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Playback}
     */
    getplayback(playbackId, callback) {
      let postBody = null;

      let pathParams = {
        'playbackId': playbackId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Playback;

      return this.apiClient.callApi(
        '/playbacks/{playbackId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the stop operation.
     * @callback module:api/PlaybacksApi~stopCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop a playback.
     * @param {module:api/PlaybacksApi~stopCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stop(playbackId, callback) {
      let postBody = null;

      let pathParams = {
        'playbackId': playbackId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/playbacks/{playbackId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
