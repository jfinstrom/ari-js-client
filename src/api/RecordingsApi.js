/**
 * Asterisk ARI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import LiveRecording from '../model/LiveRecording';
import StoredRecording from '../model/StoredRecording';

/**
* Recordings service.
* @module api/RecordingsApi
* @version 6.0.0
*/
export default class RecordingsApi {

    /**
    * Constructs a new RecordingsApi. 
    * @alias module:api/RecordingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the cancel operation.
     * @callback module:api/RecordingsApi~cancelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop a live recording and discard it.
     * @param {module:api/RecordingsApi~cancelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cancel(recordingName, callback) {
      let postBody = null;

      let pathParams = {
        'recordingName': recordingName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/recordings/live/{recordingName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the copyStored operation.
     * @callback module:api/RecordingsApi~copyStoredCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StoredRecording} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Copy a stored recording.
     * @param {module:api/RecordingsApi~copyStoredCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StoredRecording}
     */
    copyStored(recordingName, destinationRecordingName, callback) {
      let postBody = null;

      let pathParams = {
        'recordingName': recordingName
      };
      let queryParams = {
        'destinationRecordingName': destinationRecordingName
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = StoredRecording;

      return this.apiClient.callApi(
        '/recordings/stored/{recordingName}/copy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteStored operation.
     * @callback module:api/RecordingsApi~deleteStoredCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a stored recording.
     * @param {module:api/RecordingsApi~deleteStoredCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteStored(recordingName, callback) {
      let postBody = null;

      let pathParams = {
        'recordingName': recordingName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/recordings/stored/{recordingName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getLive operation.
     * @callback module:api/RecordingsApi~getLiveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LiveRecording} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List live recordings.
     * @param {module:api/RecordingsApi~getLiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LiveRecording}
     */
    getLive(recordingName, callback) {
      let postBody = null;

      let pathParams = {
        'recordingName': recordingName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = LiveRecording;

      return this.apiClient.callApi(
        '/recordings/live/{recordingName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getStored operation.
     * @callback module:api/RecordingsApi~getStoredCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StoredRecording} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a stored recording&#x27;s details.
     * @param {module:api/RecordingsApi~getStoredCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StoredRecording}
     */
    getStored(recordingName, callback) {
      let postBody = null;

      let pathParams = {
        'recordingName': recordingName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = StoredRecording;

      return this.apiClient.callApi(
        '/recordings/stored/{recordingName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getStoredFile operation.
     * @callback module:api/RecordingsApi~getStoredFileCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the file associated with the stored recording.
     * @param {module:api/RecordingsApi~getStoredFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getStoredFile(recordingName, callback) {
      let postBody = null;

      let pathParams = {
        'recordingName': recordingName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = File;

      return this.apiClient.callApi(
        '/recordings/stored/{recordingName}/file', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listStored operation.
     * @callback module:api/RecordingsApi~listStoredCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/StoredRecording>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List recordings that are complete.
     * @param {module:api/RecordingsApi~listStoredCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/StoredRecording>}
     */
    listStored(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [StoredRecording];

      return this.apiClient.callApi(
        '/recordings/stored', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the muterecording operation.
     * @callback module:api/RecordingsApi~muterecordingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mute a live recording.
     * Muting a recording suspends silence detection, which will be restarted when the recording is unmuted.
     * @param {module:api/RecordingsApi~muterecordingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    muterecording(recordingName, callback) {
      let postBody = null;

      let pathParams = {
        'recordingName': recordingName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/recordings/live/{recordingName}/mute', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the pause operation.
     * @callback module:api/RecordingsApi~pauseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pause a live recording.
     * Pausing a recording suspends silence detection, which will be restarted when the recording is unpaused. Paused time is not included in the accounting for maxDurationSeconds.
     * @param {module:api/RecordingsApi~pauseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pause(recordingName, callback) {
      let postBody = null;

      let pathParams = {
        'recordingName': recordingName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/recordings/live/{recordingName}/pause', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the stoprecording operation.
     * @callback module:api/RecordingsApi~stoprecordingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop a live recording and store it.
     * @param {module:api/RecordingsApi~stoprecordingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stoprecording(recordingName, callback) {
      let postBody = null;

      let pathParams = {
        'recordingName': recordingName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/recordings/live/{recordingName}/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the unmuterecording operation.
     * @callback module:api/RecordingsApi~unmuterecordingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unmute a live recording.
     * @param {module:api/RecordingsApi~unmuterecordingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unmuterecording(recordingName, callback) {
      let postBody = null;

      let pathParams = {
        'recordingName': recordingName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/recordings/live/{recordingName}/mute', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the unpause operation.
     * @callback module:api/RecordingsApi~unpauseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unpause a live recording.
     * @param {module:api/RecordingsApi~unpauseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unpause(recordingName, callback) {
      let postBody = null;

      let pathParams = {
        'recordingName': recordingName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/recordings/live/{recordingName}/pause', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
