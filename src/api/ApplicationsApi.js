/**
 * Asterisk ARI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Application from '../model/Application';

/**
* Applications service.
* @module api/ApplicationsApi
* @version 6.0.0
*/
export default class ApplicationsApi {

    /**
    * Constructs a new ApplicationsApi. 
    * @alias module:api/ApplicationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the filter operation.
     * @callback module:api/ApplicationsApi~filterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Application} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Filter application events types.
     * Allowed and/or disallowed event type filtering can be done. The body (parameter) should specify a JSON key/value object that describes the type of event filtering needed. One, or both of the following keys can be designated:&lt;br /&gt;&lt;br /&gt;\&quot;allowed\&quot; - Specifies an allowed list of event types&lt;br /&gt;\&quot;disallowed\&quot; - Specifies a disallowed list of event types&lt;br /&gt;&lt;br /&gt;Further, each of those key&#x27;s value should be a JSON array that holds zero, or more JSON key/value objects. Each of these objects must contain the following key with an associated value:&lt;br /&gt;&lt;br /&gt;\&quot;type\&quot; - The type name of the event to filter&lt;br /&gt;&lt;br /&gt;The value must be the string name (case sensitive) of the event type that needs filtering. For example:&lt;br /&gt;&lt;br /&gt;{ \&quot;allowed\&quot;: [ { \&quot;type\&quot;: \&quot;StasisStart\&quot; }, { \&quot;type\&quot;: \&quot;StasisEnd\&quot; } ] }&lt;br /&gt;&lt;br /&gt;As this specifies only an allowed list, then only those two event type messages are sent to the application. No other event messages are sent.&lt;br /&gt;&lt;br /&gt;The following rules apply:&lt;br /&gt;&lt;br /&gt;* If the body is empty, both the allowed and disallowed filters are set empty.&lt;br /&gt;* If both list types are given then both are set to their respective values (note, specifying an empty array for a given type sets that type to empty).&lt;br /&gt;* If only one list type is given then only that type is set. The other type is not updated.&lt;br /&gt;* An empty \&quot;allowed\&quot; list means all events are allowed.&lt;br /&gt;* An empty \&quot;disallowed\&quot; list means no events are disallowed.&lt;br /&gt;* Disallowed events take precedence over allowed events if the event type is specified in both lists.
     * @param {Object} opts Optional parameters
     * @param {module:api/ApplicationsApi~filterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Application}
     */
    filter(applicationName, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        'applicationName': applicationName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['*/*'];
      let accepts = ['*/*'];
      let returnType = Application;

      return this.apiClient.callApi(
        '/applications/{applicationName}/eventFilter', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the get operation.
     * @callback module:api/ApplicationsApi~getCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Application} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details of an application.
     * @param {module:api/ApplicationsApi~getCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Application}
     */
    get(applicationName, callback) {
      let postBody = null;

      let pathParams = {
        'applicationName': applicationName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Application;

      return this.apiClient.callApi(
        '/applications/{applicationName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the list operation.
     * @callback module:api/ApplicationsApi~listCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Application>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all applications.
     * @param {module:api/ApplicationsApi~listCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Application>}
     */
    list(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Application];

      return this.apiClient.callApi(
        '/applications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the subscribe operation.
     * @callback module:api/ApplicationsApi~subscribeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Application} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subscribe an application to a event source.
     * Returns the state of the application after the subscriptions have changed
     * @param {module:api/ApplicationsApi~subscribeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Application}
     */
    subscribe(applicationName, eventSource, callback) {
      let postBody = null;

      let pathParams = {
        'applicationName': applicationName
      };
      let queryParams = {
        'eventSource': this.apiClient.buildCollectionParam(eventSource, 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Application;

      return this.apiClient.callApi(
        '/applications/{applicationName}/subscription', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the unsubscribe operation.
     * @callback module:api/ApplicationsApi~unsubscribeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Application} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unsubscribe an application from an event source.
     * Returns the state of the application after the subscriptions have changed
     * @param {module:api/ApplicationsApi~unsubscribeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Application}
     */
    unsubscribe(applicationName, eventSource, callback) {
      let postBody = null;

      let pathParams = {
        'applicationName': applicationName
      };
      let queryParams = {
        'eventSource': this.apiClient.buildCollectionParam(eventSource, 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Application;

      return this.apiClient.callApi(
        '/applications/{applicationName}/subscription', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
