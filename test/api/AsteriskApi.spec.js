/**
 * Asterisk ARI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AsteriskAri);
  }
}(this, function(expect, AsteriskAri) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AsteriskAri.AsteriskApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AsteriskApi', function() {
    describe('addLog', function() {
      it('should call addLog successfully', function(done) {
        //uncomment below and update the code to test addLog
        //instance.addLog(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteLog', function() {
      it('should call deleteLog successfully', function(done) {
        //uncomment below and update the code to test deleteLog
        //instance.deleteLog(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteObject', function() {
      it('should call deleteObject successfully', function(done) {
        //uncomment below and update the code to test deleteObject
        //instance.deleteObject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getGlobalVar', function() {
      it('should call getGlobalVar successfully', function(done) {
        //uncomment below and update the code to test getGlobalVar
        //instance.getGlobalVar(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getInfo', function() {
      it('should call getInfo successfully', function(done) {
        //uncomment below and update the code to test getInfo
        //instance.getInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getModule', function() {
      it('should call getModule successfully', function(done) {
        //uncomment below and update the code to test getModule
        //instance.getModule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getObject', function() {
      it('should call getObject successfully', function(done) {
        //uncomment below and update the code to test getObject
        //instance.getObject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listLogChannels', function() {
      it('should call listLogChannels successfully', function(done) {
        //uncomment below and update the code to test listLogChannels
        //instance.listLogChannels(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listModules', function() {
      it('should call listModules successfully', function(done) {
        //uncomment below and update the code to test listModules
        //instance.listModules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('loadModule', function() {
      it('should call loadModule successfully', function(done) {
        //uncomment below and update the code to test loadModule
        //instance.loadModule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ping', function() {
      it('should call ping successfully', function(done) {
        //uncomment below and update the code to test ping
        //instance.ping(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reloadModule', function() {
      it('should call reloadModule successfully', function(done) {
        //uncomment below and update the code to test reloadModule
        //instance.reloadModule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('rotateLog', function() {
      it('should call rotateLog successfully', function(done) {
        //uncomment below and update the code to test rotateLog
        //instance.rotateLog(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setGlobalVar', function() {
      it('should call setGlobalVar successfully', function(done) {
        //uncomment below and update the code to test setGlobalVar
        //instance.setGlobalVar(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unloadModule', function() {
      it('should call unloadModule successfully', function(done) {
        //uncomment below and update the code to test unloadModule
        //instance.unloadModule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateObject', function() {
      it('should call updateObject successfully', function(done) {
        //uncomment below and update the code to test updateObject
        //instance.updateObject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
